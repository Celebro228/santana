use std::process::Command;


fn main() {
    let output = Command::new("lspci")
        .arg("-mm")
        .output()
        .expect("failed to run lspci");

    let text = String::from_utf8_lossy(&output.stdout);

    let mut drivers = Drivers::default();
    println!("{:?}", drivers);

    for gpu in text.lines() {
        if gpu.contains("VGA") || gpu.contains("3D controller") {
            if gpu.to_lowercase().contains("nvidia") {
                drivers.nvidia = true;
            } else if gpu.to_lowercase().contains("amd") || gpu.to_lowercase().contains("ati") {
                drivers.amd = true;
            }
        }
    }


    println!("{:?}", drivers);
}


#[derive(Default, Debug)]
struct Drivers {
    nvidia: bool,
    amd: bool,
}

use ratatui::DefaultTerminal;
use crossterm::{event::{self, KeyCode}, terminal};

mod draw;
use draw::*;


#[derive(Debug, Clone)]
pub enum Screen {
    LanguageSelection,
    Welcome,
    WifiSelection,
    DiskSelection,
    Partitioning,
    ProgrammsSelection,
    UserSetup,
    Installing,
    Complete,
}

#[derive(Debug, Clone)]
pub struct App {
    pub language: String,
    pub current_step: Screen,
    pub selected_disk: String,
    pub user_name: String,
    pub user_password: String,
    pub install_progress: u16,
    pub log_messages: Vec<String>,
    pub debug_mode: bool,
}


fn main() {
    let terminal = ratatui::init();
    run(terminal);
    ratatui::restore();
}

fn run(mut terminal: DefaultTerminal) {

    let mut app = App {
        language: "en".to_string(),
        current_step: Screen::LanguageSelection,
        selected_disk: "".to_string(),
        user_name: "".to_string(),
        user_password: "".to_string(),
        install_progress: 0,
        log_messages: Vec::new(),
        debug_mode: false,
    };

    loop {
        terminal.draw(|frame| draw(frame, &mut app)).expect("Error draw procces");

        if let Some(key) = event::read().expect("Event error").as_key_press_event() {
            match key.code {
                KeyCode::Char('d') => app.debug_mode = !app.debug_mode,
                KeyCode::Enter => step_next(&mut app.current_step),
                KeyCode::Char('q') => step_back(&mut app.current_step),
                KeyCode::Esc => break,
                _ => {}
            }
        }
    }
}


fn step_back(step: &mut Screen) {
    *step = match step {
        Screen::LanguageSelection => Screen::LanguageSelection,
        Screen::Welcome => Screen::LanguageSelection,
        Screen::WifiSelection => Screen::Welcome,
        Screen::DiskSelection => Screen::WifiSelection,
        Screen::Partitioning => Screen::DiskSelection,
        Screen::ProgrammsSelection => Screen::Partitioning,
        Screen::UserSetup => Screen::ProgrammsSelection,
        Screen::Installing => Screen::UserSetup,
        Screen::Complete => Screen::Installing,
    }
}

fn step_next(step: &mut Screen) {
    *step = match step {
        Screen::LanguageSelection => Screen::Welcome,
        Screen::Welcome => Screen::WifiSelection,
        Screen::WifiSelection => Screen::DiskSelection,
        Screen::DiskSelection => Screen::Partitioning,
        Screen::Partitioning => Screen::ProgrammsSelection,
        Screen::ProgrammsSelection => Screen::UserSetup,
        Screen::UserSetup => Screen::Installing,
        Screen::Installing => Screen::Complete,
        Screen::Complete => Screen::Complete,
    }
}

use ratatui::{
    backend::Backend,
    layout::{Alignment, Constraint, Direction, Layout, Rect},
    style::{Color, Modifier, Style},
    text::{Line, Span, Text},
    widgets::{Block, Borders, Clear, Gauge, List, ListItem, Paragraph, Wrap},
    Frame,
};

#[derive(Debug, Clone)]
pub enum Screen {
    Welcome,
    DiskSelection,
    Partitioning,
    UserSetup,
    Installing,
    Complete,
}

#[derive(Debug, Clone)]
pub struct AppState {
    pub current_step: Screen,
    pub selected_disk: Option<String>,
    pub username: String,
    pub install_progress: u16,
    pub log_messages: Vec<String>,
}

impl Default for AppState {
    fn default() -> Self {
        Self {
            current_step: Screen::Welcome,
            selected_disk: None,
            username: String::new(),
            install_progress: 0,
            log_messages: vec!["–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Santana!".to_string()],
        }
    }
}

pub fn draw_ui(f: &mut Frame, app: &AppState) {
    let size = f.area();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π layout
    let chunks = Layout::default()
        .direction(Direction::Vertical)
        .margin(1)
        .constraints([
            Constraint::Length(3),    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Constraint::Min(0),       // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            Constraint::Length(3),    // –°—Ç–∞—Ç—É—Å –±–∞—Ä
        ])
        .split(size);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw_header(f, chunks[0]);
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
    match app.current_step {
        Screen::Welcome => draw_welcome(f, chunks[1]),
        Screen::DiskSelection => draw_disk_selection(f, chunks[1], app),
        Screen::Partitioning => draw_partitioning(f, chunks[1], app),
        Screen::UserSetup => draw_user_setup(f, chunks[1], app),
        Screen::Installing => draw_installing(f, chunks[1], app),
        Screen::Complete => draw_complete(f, chunks[1]),
    }
    
    // –°—Ç–∞—Ç—É—Å –±–∞—Ä
    draw_status_bar(f, chunks[2], app);
}

fn draw_header(f: &mut Frame, area: Rect) {
    let title = Paragraph::new("üèîÔ∏è  Santana - –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Arch Linux")
        .style(Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
        .alignment(Alignment::Center)
        .block(Block::default().borders(Borders::ALL));
    
    f.render_widget(title, area);
}

fn draw_welcome(f: &mut Frame, area: Rect) {
    let welcome_text = vec![
        Line::from(""),
        Line::from(Span::styled(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Santana!",
            Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD)
        )),
        Line::from(""),
        Line::from("Santana –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Arch Linux –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ."),
        Line::from(""),
        Line::from("–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"),
        Line::from("‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"),
        Line::from("‚Ä¢ –í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"),
        Line::from("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ UEFI —Ä–µ–∂–∏–º–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"),
        Line::from(""),
        Line::from(Span::styled(
            "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞",
            Style::default().fg(Color::Green)
        )),
    ];
    
    let paragraph = Paragraph::new(welcome_text)
        .alignment(Alignment::Center)
        .wrap(Wrap { trim: true })
        .block(Block::default().borders(Borders::ALL).title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"));
    
    f.render_widget(paragraph, area);
}

fn draw_disk_selection(f: &mut Frame, area: Rect, app: &AppState) {
    let disks = vec![
        ListItem::new("/dev/sda - 500GB SSD"),
        ListItem::new("/dev/sdb - 1TB HDD"),
        ListItem::new("/dev/nvme0n1 - 256GB NVMe"),
    ];
    
    let list = List::new(disks)
        .block(Block::default().borders(Borders::ALL).title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"))
        .highlight_style(Style::default().bg(Color::Blue).fg(Color::White))
        .highlight_symbol(">> ");
    
    f.render_widget(list, area);
}

fn draw_partitioning(f: &mut Frame, area: Rect, app: &AppState) {
    let text = vec![
        Line::from("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤..."),
        Line::from(""),
        Line::from(format!("–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏—Å–∫: {}", 
            app.selected_disk.as_ref().unwrap_or(&"–ù–µ –≤—ã–±—Ä–∞–Ω".to_string()))),
        Line::from(""),
        Line::from("–ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã:"),
        Line::from("‚Ä¢ /dev/sda1 - 512MB - EFI System Partition"),
        Line::from("‚Ä¢ /dev/sda2 - 4GB - Swap"),
        Line::from("‚Ä¢ /dev/sda3 - –û—Å—Ç–∞–ª—å–Ω–æ–µ - Root (/)"),
    ];
    
    let paragraph = Paragraph::new(text)
        .block(Block::default().borders(Borders::ALL).title("–†–∞–∑–º–µ—Ç–∫–∞ –¥–∏—Å–∫–∞"))
        .wrap(Wrap { trim: true });
    
    f.render_widget(paragraph, area);
}

fn draw_user_setup(f: &mut Frame, area: Rect, app: &AppState) {
    let text = vec![
        Line::from("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        Line::from(""),
        Line::from(format!("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", app.username)),
        Line::from(""),
        Line::from("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã):"),
    ];
    
    let paragraph = Paragraph::new(text)
        .block(Block::default().borders(Borders::ALL).title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
        .wrap(Wrap { trim: true });
    
    f.render_widget(paragraph, area);
}

fn draw_installing(f: &mut Frame, area: Rect, app: &AppState) {
    let chunks = Layout::default()
        .direction(Direction::Vertical)
        .constraints([
            Constraint::Length(4),    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            Constraint::Min(0),       // –õ–æ–≥
        ])
        .split(area);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    let gauge = Gauge::default()
        .block(Block::default().borders(Borders::ALL).title("–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏"))
        .gauge_style(Style::default().fg(Color::Green))
        .percent(app.install_progress)
        .label(format!("{}%", app.install_progress));
    
    f.render_widget(gauge, chunks[0]);
    
    // –õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    let log_items: Vec<ListItem> = app.log_messages
        .iter()
        .map(|msg| ListItem::new(msg.as_str()))
        .collect();
    
    let log_list = List::new(log_items)
        .block(Block::default().borders(Borders::ALL).title("–õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"));
    
    f.render_widget(log_list, chunks[1]);
}

fn draw_complete(f: &mut Frame, area: Rect) {
    let text = vec![
        Line::from(""),
        Line::from(Span::styled(
            "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ",
            Style::default().fg(Color::Green).add_modifier(Modifier::BOLD)
        )),
        Line::from(""),
        Line::from("Arch Linux —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."),
        Line::from(""),
        Line::from("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"),
        Line::from("‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É"),
        Line::from("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: sudo pacman -Syu"),
        Line::from("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã"),
        Line::from(""),
        Line::from(Span::styled(
            "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞",
            Style::default().fg(Color::Yellow)
        )),
    ];
    
    let paragraph = Paragraph::new(text)
        .alignment(Alignment::Center)
        .block(Block::default().borders(Borders::ALL).title("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))
        .wrap(Wrap { trim: true });
    
    f.render_widget(paragraph, area);
}

fn draw_status_bar(f: &mut Frame, area: Rect, app: &AppState) {
    let status_text = match app.current_step {
        Screen::Welcome => "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å | Enter - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å, Ctrl+C - –í—ã—Ö–æ–¥",
        Screen::DiskSelection => "–í—ã–±–æ—Ä –¥–∏—Å–∫–∞ | ‚Üë‚Üì - –ù–∞–≤–∏–≥–∞—Ü–∏—è, Enter - –í—ã–±—Ä–∞—Ç—å",
        Screen::Partitioning => "–†–∞–∑–º–µ—Ç–∫–∞ –¥–∏—Å–∫–∞ | Enter - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        Screen::UserSetup => "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ",
        Screen::Installing => "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ | –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ...",
        Screen::Complete => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ | –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É",
    };
    
    let status = Paragraph::new(status_text)
        .style(Style::default().fg(Color::White).bg(Color::Blue))
        .alignment(Alignment::Center)
        .block(Block::default());
    
    f.render_widget(status, area);
}